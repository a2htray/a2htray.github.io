<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go flags on Mozart&#39;s Sheet</title>
    <link>/tags/go-flags/</link>
    <description>Recent content in go flags on Mozart&#39;s Sheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} a2htray. All Rights Reserved.</copyright>
    <lastBuildDate>Thu, 09 Mar 2023 20:38:36 +0800</lastBuildDate><atom:link href="/tags/go-flags/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go flag 自定义选项类型</title>
      <link>/posts/go-packages/flag-user-defined-flag-type/</link>
      <pubDate>Thu, 09 Mar 2023 20:38:36 +0800</pubDate>
      
      <guid>/posts/go-packages/flag-user-defined-flag-type/</guid>
      <description>&lt;p&gt;&lt;code&gt;flag&lt;/code&gt; 包定义了一系列函数，可用于定义命令行参数，支持的参数类型如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string：flag.StringVar 函数&lt;/li&gt;
&lt;li&gt;bool：flag.BoolVar 函数&lt;/li&gt;
&lt;li&gt;time.Duration: flag.DurationVar 函数&lt;/li&gt;
&lt;li&gt;int: flag.IntVar 函数&lt;/li&gt;
&lt;li&gt;uint: flag.UintVar 函数&lt;/li&gt;
&lt;li&gt;float64: flag.Float64Var 函数&lt;/li&gt;
&lt;li&gt;int64: flag.Int64Var 函数&lt;/li&gt;
&lt;li&gt;uint64: flag.Uint64Var 函数&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Go flag 支持选项简写</title>
      <link>/posts/go-packages/flag-shorthand/</link>
      <pubDate>Thu, 09 Mar 2023 20:17:17 +0800</pubDate>
      
      <guid>/posts/go-packages/flag-shorthand/</guid>
      <description>&lt;p&gt;在命令行工具的开发过程中，我们常常需要设置一个同时支持短名称和长名称的选项，如 &lt;code&gt;-d&lt;/code&gt; 等价于 &lt;code&gt;--debug&lt;/code&gt;、&lt;code&gt;-p&lt;/code&gt; 等价于 &lt;code&gt;--password&lt;/code&gt;。在使用 Go flag 包的情况下，该需求的实现相当简单，只需要定义两个不同的 flag 指向同一个变量即可。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
