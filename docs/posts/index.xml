<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mozart&#39;s Sheet</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Mozart&#39;s Sheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} a2htray. All Rights Reserved.</copyright>
    <lastBuildDate>Tue, 10 May 2022 22:15:52 +0800</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>与 image 概念相关的命令</title>
      <link>/posts/docker-roadmap-image/</link>
      <pubDate>Tue, 10 May 2022 22:15:52 +0800</pubDate>
      
      <guid>/posts/docker-roadmap-image/</guid>
      <description>&lt;p&gt;Docker 命令快速查询，收集了与 docker image 相关的命令及部分示例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>channel 的方向</title>
      <link>/posts/go-channel-direction/</link>
      <pubDate>Thu, 05 May 2022 17:17:29 +0800</pubDate>
      
      <guid>/posts/go-channel-direction/</guid>
      <description>&lt;p&gt;在回忆管道方向的语法上时不时地会出错，所以搜罗一些资料以加强自身的记忆。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go&amp;MySQL`max_allowed_packet`</title>
      <link>/posts/go-max-allowed-packet/</link>
      <pubDate>Sat, 30 Apr 2022 20:25:09 +0800</pubDate>
      
      <guid>/posts/go-max-allowed-packet/</guid>
      <description>&lt;p&gt;当发送给数据库的语句过大时，会报如下错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;panic: Error 1105: Parameter of prepared statement which is &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; through mysql_send_long_data&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; is longer than &lt;span class=&#34;s1&#34;&gt;&amp;#39;max_allowed_packet&amp;#39;&lt;/span&gt; bytes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从报错中可知，需要修改 &lt;code&gt;max_allowed_packet&lt;/code&gt; 选项的值。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IDE 代码显示无引用 no usages found</title>
      <link>/posts/ide-no-usages-found/</link>
      <pubDate>Wed, 27 Apr 2022 20:55:01 +0800</pubDate>
      
      <guid>/posts/ide-no-usages-found/</guid>
      <description>&lt;p&gt;IntelliJ IDEA 代码显示灰色，表示无任何引用，实际上是有引用。出现这种问题，非常不易于 DEBUG。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Map</title>
      <link>/posts/go-map-detail/</link>
      <pubDate>Wed, 27 Apr 2022 16:02:52 +0800</pubDate>
      
      <guid>/posts/go-map-detail/</guid>
      <description>&lt;p&gt;Go 中 map 是键值对的关联容器（Associative Container），可以存储不同类型的键值对，其中键的类型需要满足可比较（==）特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Slice 什么时候报 out of range</title>
      <link>/posts/go-slice-out-of-range/</link>
      <pubDate>Tue, 26 Apr 2022 09:24:01 +0800</pubDate>
      
      <guid>/posts/go-slice-out-of-range/</guid>
      <description>&lt;p&gt;面试的时候问到了一个关于 go Slice 的问题，即为什么在 &lt;code&gt;a[i:]&lt;/code&gt; 中 &lt;code&gt;i&lt;/code&gt; 的取值可以是 &lt;code&gt;a&lt;/code&gt; 的长度。平时开发中也是这么用的，但没太深入的了解，所以在这篇文章中对其进行一些探讨。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows 下移动文件的坑</title>
      <link>/posts/go-file-rename-pit/</link>
      <pubDate>Sun, 24 Apr 2022 17:16:44 +0800</pubDate>
      
      <guid>/posts/go-file-rename-pit/</guid>
      <description>&lt;p&gt;在 Windows 下，Go 的 &lt;code&gt;os&lt;/code&gt; 标准库提供的 &lt;code&gt;Rename&lt;/code&gt; 方法不能跨磁盘移动文件。下面通过问题重现，提供两种解决方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>URL 下载网络文件</title>
      <link>/posts/go-download-network-file/</link>
      <pubDate>Sun, 24 Apr 2022 10:00:25 +0800</pubDate>
      
      <guid>/posts/go-download-network-file/</guid>
      <description>&lt;p&gt;从网络上下载文件是开发过程中常用的需求，常规流程是：（1）发送请求；（2）接收响应并读取响应体内容；（3）保存到本地文件。本文包含的两个例子分别来自于&lt;strong&gt;参考 [1]&lt;/strong&gt; 和&lt;strong&gt;参考 [2]&lt;/strong&gt;，在此基础上做了少量的修改。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis 的 list 和 stream：异步记录请求信息</title>
      <link>/posts/go-redis-request-log-dumper/</link>
      <pubDate>Sat, 23 Apr 2022 19:05:01 +0800</pubDate>
      
      <guid>/posts/go-redis-request-log-dumper/</guid>
      <description>&lt;p&gt;在 Web 开发中，常常需要对请求信息进行记录，形成日志以便于后期评估应用的性能。请求信息通常包含客户端地址、请求的 URL、请求时间及请求执行时间。在程序中，可以以同步或异步的方式完成这一需求。同步方式是指请求信息写入日志文件后才返回数据给客户端，异步方式则是在返回数据之前以新线程或进程完成对请求信息的记录。开源的日志包有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/go.uber.org/zap&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Zap&lt;/a&gt;：出自 Uber 团队，以高性能著称；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rs/zerolog&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Zerolog&lt;/a&gt;：以易用性著称，支持 7 种日志级别；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sirupsen/logrus&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Logrus&lt;/a&gt;：兼容标准日志包格式，也是本人常用的日志包；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apex/log&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;apex/log&lt;/a&gt;：受 Logrus 启发，简化操作后的 Logrus；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/inconshreveable/log15&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; Log15&lt;/a&gt;：日志可读性强；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;5 个日志包的详细介绍可以看&lt;a href=&#34;/posts/go-five-structured-logging-package/&#34;&gt;《5 种结构化 Go 日志包对比分析》&lt;/a&gt;这篇文章。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 的反射包 reflect</title>
      <link>/posts/go-set-value-via-reflect-package/</link>
      <pubDate>Thu, 21 Apr 2022 19:59:01 +0800</pubDate>
      
      <guid>/posts/go-set-value-via-reflect-package/</guid>
      <description>&lt;p&gt;首先贴上 Go 开发团队对 reflect 包的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Package reflect implements run-time reflection, allowing a program to manipulate objects with arbitrary types. The typical use is to take a value with static type interface{} and extract its dynamic type information by calling TypeOf, which returns a Type.&lt;/p&gt;
&lt;p&gt;A call to ValueOf returns a Value representing the run-time data. Zero takes a Type and returns a Value representing a zero value for that type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从描述中，我们得到以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;reflect 包实现了运行时的反射机制，允许程序操作任意类型的对象；&lt;/li&gt;
&lt;li&gt;TypeOf 可以得到一个 interface{} 的具体类型，ValueOf 可以得到一个 interface{} 的具体值；&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>MySQL 设置存储引擎的 3 种方法</title>
      <link>/posts/mysql-set-storage-engine/</link>
      <pubDate>Thu, 21 Apr 2022 13:35:02 +0800</pubDate>
      
      <guid>/posts/mysql-set-storage-engine/</guid>
      <description>&lt;p&gt;在 MySQL 5.5 之前，默认存储引擎为 MyISAM，之后版本的默认存储引擎为 InnoDB。&lt;/p&gt;
&lt;p&gt;选择一个合适的存储引擎至关重要。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 存储过程</title>
      <link>/posts/mysql-writing-procedure/</link>
      <pubDate>Tue, 19 Apr 2022 19:35:33 +0800</pubDate>
      
      <guid>/posts/mysql-writing-procedure/</guid>
      <description>&lt;p&gt;存储过程是存储在数据库中并且已经提前编译好的 SQL 语句集合，它是应用中数据操作的部分逻辑实现。MySQL 5 版本引入了这一设计，存储过程包含 3 个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;名称；&lt;/li&gt;
&lt;li&gt;参数列表；&lt;/li&gt;
&lt;li&gt;SQL 语句；&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>CSIG 线上面试</title>
      <link>/posts/interview-csig/</link>
      <pubDate>Fri, 15 Apr 2022 11:24:13 +0800</pubDate>
      
      <guid>/posts/interview-csig/</guid>
      <description>&lt;p&gt;有幸搞了个 CSIG 的线上面试，感觉是“没什么感觉”，一般般吧，没过。&lt;/p&gt;
&lt;p&gt;前面介绍什么就不说了，我这边没突出什么工作亮点，然后就直接共享桌面写代码了。题目是编程实现一个由字符串数组表示的大数的除以 9 的计算，后面又追问了小数点后值如何保存，所以索性在线下实现也写了写。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 性能调优</title>
      <link>/posts/database-performance-tuning/</link>
      <pubDate>Thu, 14 Apr 2022 19:59:24 +0800</pubDate>
      
      <guid>/posts/database-performance-tuning/</guid>
      <description>&lt;p&gt;数据库是应用的数据存储中心，请求增多和数据量增大都会对数据库造成严重的影响，导致数据库服务性能偏低。所以归纳了个别优化点，后续有看到新的内容也会追加。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>卡方检验 - 检验特征对是否相关</title>
      <link>/posts/python-chi-square-test/</link>
      <pubDate>Mon, 11 Apr 2022 18:57:39 +0800</pubDate>
      
      <guid>/posts/python-chi-square-test/</guid>
      <description>在本文开头，贴一段百科对卡方检验基本原理的介绍： 卡方检验就是统计样本的实际观测值与理论推断值之间的偏离程度，实际观测值与理论推断值之间的偏离</description>
    </item>
    
    <item>
      <title>帕尔默企鹅数据集测试</title>
      <link>/posts/python-palmer-archipelago-penguin-testing/</link>
      <pubDate>Mon, 11 Apr 2022 13:28:26 +0800</pubDate>
      
      <guid>/posts/python-palmer-archipelago-penguin-testing/</guid>
      <description>今天导师在群里分享了一个链接 23 个优秀的机器学习训练公共数据集，看了一下，决定对帕尔默企鹅数据集（Palmer Archipelago (Antarctica) penguin data）做一些分析。 数据</description>
    </item>
    
    <item>
      <title>Go 内置的 RPC 包</title>
      <link>/posts/go-built-in-rpc-package/</link>
      <pubDate>Sun, 10 Apr 2022 16:37:30 +0800</pubDate>
      
      <guid>/posts/go-built-in-rpc-package/</guid>
      <description>在网络或 I/O 连接中，可以使用 net/rpc 包实现对一个对象的导出方法的调用，即远程过程调用（Remote Procedure Call，RPC）。通过向 RPC 服务注册一个对象，使</description>
    </item>
    
    <item>
      <title>Go 1.18 特性 - 泛型</title>
      <link>/posts/go-1.18-release-features/</link>
      <pubDate>Sun, 10 Apr 2022 12:11:38 +0800</pubDate>
      
      <guid>/posts/go-1.18-release-features/</guid>
      <description>&lt;p&gt;Go 1.18 在 2022 年 3 月 15 日发布，根据团队的&lt;a href=&#34;https://go.dev/blog/go1.18&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;博文&lt;/a&gt;介绍，1.18 版本包含 4 个重要特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;泛型&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;fuzzing；&lt;/li&gt;
&lt;li&gt;工作空间；&lt;/li&gt;
&lt;li&gt;20% 的性能提升；&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Protocol Buffer 减少传输数据的大小</title>
      <link>/posts/protocol-buffer-reduce-data-size/</link>
      <pubDate>Sat, 09 Apr 2022 15:01:17 +0800</pubDate>
      
      <guid>/posts/protocol-buffer-reduce-data-size/</guid>
      <description>&lt;p&gt;Protocol Buffer 的介绍与语法已在文章&lt;a href=&#34;/posts/protocol-buffer-syntax/&#34;&gt;《Protocol Buffer 语法》&lt;/a&gt;给出，本文则演示了 Protocol Buffer 如何减少了传输数据的大小。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Protocol Buffer 语法</title>
      <link>/posts/protocol-buffer-syntax/</link>
      <pubDate>Fri, 08 Apr 2022 16:33:52 +0800</pubDate>
      
      <guid>/posts/protocol-buffer-syntax/</guid>
      <description>Protocol Buffer（Protobuf） 是一种高效的数据结构序列化的机制，同时也是一种结构化数据的存储格式。 序列化与反序列化 序列化：将数据结构或对</description>
    </item>
    
    <item>
      <title>Redis 集群配置过程</title>
      <link>/posts/redis-cluster-deployment/</link>
      <pubDate>Thu, 07 Apr 2022 14:07:35 +0800</pubDate>
      
      <guid>/posts/redis-cluster-deployment/</guid>
      <description>&lt;p&gt;Redis 集群是基于“主从复制”特性之上的分布式 Redis 版本，可提供高并发、高性能、高可用的数据库服务。Redis 集群突破了单台服务器的内存局限，集群中的每一个节点都可以存储数据，同时维护着 &amp;ldquo;key-node&amp;rdquo; 的映射表。本文记录了 3 主 3 从的 Redis 集群的配置过程，主要内容包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Redis 集群的配置过程；&lt;/li&gt;
&lt;li&gt;集群相关命令；&lt;/li&gt;
&lt;li&gt;Go 存取集群数据；&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Matplotlib bar 图常规编码</title>
      <link>/posts/python-matplotlib-bar-tips/</link>
      <pubDate>Tue, 05 Apr 2022 10:11:12 +0800</pubDate>
      
      <guid>/posts/python-matplotlib-bar-tips/</guid>
      <description>&lt;p&gt;每当有快速绘制图表的需求时，第一时间反应到的肯定是 Matplotlib，因为其官方提供了详细的 API 文档及示例。但是每次在编码时，总是时不时地需要查看文档，不利用于可视化快速成型。所以在本文中罗列一些 bar 图的快速实现，方便 Ctrl+C/V。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>k-means 基本原理及其实现</title>
      <link>/posts/data-analysis-kmeans/</link>
      <pubDate>Sat, 02 Apr 2022 13:27:02 +0800</pubDate>
      
      <guid>/posts/data-analysis-kmeans/</guid>
      <description>&lt;p&gt;k-means 算法是一种无监督的聚类算法，其优点是逻辑简单、易于实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 1.16 运行 Revel 项目</title>
      <link>/posts/go-revel-run-require-packages/</link>
      <pubDate>Thu, 31 Mar 2022 10:40:58 +0800</pubDate>
      
      <guid>/posts/go-revel-run-require-packages/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://revel.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Revel&lt;/a&gt; 是一个以高效率、高性能著称的 Go Web 框架，提供了路由、参数解析和验证、会话机制、模板机制、缓存和任务管理等诸多常用的 Web 开发功能。同时作为一个全栈的 MVC 框架， Revel 通过模块实现了组件的复用，因此可以大大提高开发者的效率。其高性能则是依托 Go 语言的性能，相信这个不必多说。但相较于其它职责相对单一的 Web 框架（如 Gin、go-restful），Revel 只能说是在保证性能的基础上尽可能地对开发者友好。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis 主从复制配置过程</title>
      <link>/posts/redis-master-slave-replication-deployment/</link>
      <pubDate>Wed, 30 Mar 2022 10:28:31 +0800</pubDate>
      
      <guid>/posts/redis-master-slave-replication-deployment/</guid>
      <description>&lt;p&gt;Redis 主从复制可以实现数据库的读写分离，即主节点负责接收写请求、从节点负责接收读请求，是高性能 Redis 服务的基础。所以配置 Redis 主从复制应当作为开发者的技能之一，后文内容包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单机配置一主二从的主从复制服务&lt;/li&gt;
&lt;li&gt;服务验证；&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>同源策略 Same-Origin Policy</title>
      <link>/posts/web-same-origin-policy/</link>
      <pubDate>Tue, 29 Mar 2022 15:56:02 +0800</pubDate>
      
      <guid>/posts/web-same-origin-policy/</guid>
      <description>&lt;p&gt;同源策略（Same-Origin Policy，SOP）是一种保护 Web 资源的安全机制，它限制了不同源之间的资源访问。需要说明的是，SOP 只作用于应用脚本，这意味着在 HTML 标签中可以引入不同源的图片、CSS 文件或动态加载的脚本文件（见&lt;a href=&#34;/posts/web-same-origin-policy/#%e9%aa%8c%e8%af%81-1&#34;&gt;验证 1&lt;/a&gt;）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 读写文件</title>
      <link>/posts/python-read-and-write-file/</link>
      <pubDate>Mon, 28 Mar 2022 13:28:47 +0800</pubDate>
      
      <guid>/posts/python-read-and-write-file/</guid>
      <description>&lt;p&gt;在开发过程中，开发者常常需要对文件执行读写操作，仅以此文记录读写文件的常规用法。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
