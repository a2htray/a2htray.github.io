<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Mozart&#39;s Sheet</title>
    <link>/categories/go/</link>
    <description>Recent content in Go on Mozart&#39;s Sheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} a2htray. All Rights Reserved.</copyright>
    <lastBuildDate>Sun, 07 Jan 2024 14:41:11 +0800</lastBuildDate><atom:link href="/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 泛型函数 - 解构类型参数</title>
      <link>/posts/go/deconstructing-type-in-go-with-a-example/</link>
      <pubDate>Sun, 07 Jan 2024 14:41:11 +0800</pubDate>
      
      <guid>/posts/go/deconstructing-type-in-go-with-a-example/</guid>
      <description>&lt;p&gt;原文地址：&lt;a href=&#34;https://go.dev/blog/deconstructing-type-parameters&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://go.dev/blog/deconstructing-type-parameters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;译者评论&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文通过 slices.Clone 泛型函数介绍了 Go 是如何使用&lt;font color=&#34;#0d6efd&#34; style=&#34;font-weight: bold;&#34;&gt;类型推断&lt;/font&gt;完成参数类型的解构。简单来说，如果第一个类型参数是一个复合类型，则可以通过第二、第三或更多的类型参数约束复杂类型中的类型参数，而类型推断则可以通过第一个参数推断出后续类型参数的实际类型。另外本文还说明为消除歧义而引入 &lt;font color=&#34;#0d6efd&#34; style=&#34;font-weight: bold;&#34;&gt;~ 符号&lt;/font&gt;，即用于指定类型的底层类型。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go slog 标准包功能详细指南</title>
      <link>/posts/go/go-slog-package-translate/</link>
      <pubDate>Sun, 03 Sep 2023 16:51:25 +0800</pubDate>
      
      <guid>/posts/go/go-slog-package-translate/</guid>
      <description>&lt;p&gt;在学习 log/slog 标准包的过程中，我搜索到一篇全面讲解 log/slog 标准包的文章，感受良多，故将其翻译成中文并分享到微信公众号。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&#34;https://betterstack.com/community/guides/logging/logging-in-go/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://betterstack.com/community/guides/logging/logging-in-go/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>递归版本的归并排序 Go &amp; Python 实现</title>
      <link>/posts/sorts/r_merge-sort/</link>
      <pubDate>Sun, 23 Apr 2023 23:38:47 +0800</pubDate>
      
      <guid>/posts/sorts/r_merge-sort/</guid>
      <description>&lt;p&gt;递归版本的归并排序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go flag 自定义选项类型</title>
      <link>/posts/go-packages/flag-user-defined-flag-type/</link>
      <pubDate>Thu, 09 Mar 2023 20:38:36 +0800</pubDate>
      
      <guid>/posts/go-packages/flag-user-defined-flag-type/</guid>
      <description>&lt;p&gt;&lt;code&gt;flag&lt;/code&gt; 包定义了一系列函数，可用于定义命令行参数，支持的参数类型如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string：flag.StringVar 函数&lt;/li&gt;
&lt;li&gt;bool：flag.BoolVar 函数&lt;/li&gt;
&lt;li&gt;time.Duration: flag.DurationVar 函数&lt;/li&gt;
&lt;li&gt;int: flag.IntVar 函数&lt;/li&gt;
&lt;li&gt;uint: flag.UintVar 函数&lt;/li&gt;
&lt;li&gt;float64: flag.Float64Var 函数&lt;/li&gt;
&lt;li&gt;int64: flag.Int64Var 函数&lt;/li&gt;
&lt;li&gt;uint64: flag.Uint64Var 函数&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Go flag 支持选项简写</title>
      <link>/posts/go-packages/flag-shorthand/</link>
      <pubDate>Thu, 09 Mar 2023 20:17:17 +0800</pubDate>
      
      <guid>/posts/go-packages/flag-shorthand/</guid>
      <description>&lt;p&gt;在命令行工具的开发过程中，我们常常需要设置一个同时支持短名称和长名称的选项，如 &lt;code&gt;-d&lt;/code&gt; 等价于 &lt;code&gt;--debug&lt;/code&gt;、&lt;code&gt;-p&lt;/code&gt; 等价于 &lt;code&gt;--password&lt;/code&gt;。在使用 Go flag 包的情况下，该需求的实现相当简单，只需要定义两个不同的 flag 指向同一个变量即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于 Docker 的 Nginx 负载均衡配置</title>
      <link>/posts/nginx-load-balance-with-docker/</link>
      <pubDate>Thu, 16 Feb 2023 21:22:17 +0800</pubDate>
      
      <guid>/posts/nginx-load-balance-with-docker/</guid>
      <description>本文主要介绍如何基于 Docker 生成容器化应用以及配置 Nginx 来实现 Web 服务的负载均衡，包含以下内容： Go 简易 Web 程序（hello world） 通过 Dockerfile 生成镜像 Nginx 配置</description>
    </item>
    
    <item>
      <title>Two Steps to Build an Academic Website with Hugo and Wowchemy</title>
      <link>/posts/go-hugo-wowchemy-academic-website/</link>
      <pubDate>Wed, 28 Sep 2022 23:10:30 +0800</pubDate>
      
      <guid>/posts/go-hugo-wowchemy-academic-website/</guid>
      <description>&lt;p&gt;Four days ago, I got a requirement to build an academic website for &lt;a href=&#34;https://github.com/jingyunluo&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;yunzila~&lt;/a&gt;. This
reminds me of my previous blog experience. Since my blog is built with Hugo, I started to find an academic theme which is
designed for Hugo. Here is a link to &lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Hugo themes&lt;/a&gt;, and then I find the &lt;a href=&#34;https://themes.gohugo.io/themes/starter-hugo-academic/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Academic&lt;/a&gt;
theme developed by &lt;a href=&#34;https://github.com/gcushen&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;gcushen&lt;/a&gt; which meets my needs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Slice 的使用</title>
      <link>/posts/go-slice-usage/</link>
      <pubDate>Mon, 19 Sep 2022 23:33:58 +0800</pubDate>
      
      <guid>/posts/go-slice-usage/</guid>
      <description>&lt;p&gt;原文：&lt;a href=&#34;https://yourbasic.org/golang/slices-explained/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Slices/arrays explained: create, index, slice, iterate&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Slice Roadmap</title>
      <link>/posts/go-slice-basic/</link>
      <pubDate>Mon, 19 Sep 2022 23:22:21 +0800</pubDate>
      
      <guid>/posts/go-slice-basic/</guid>
      <description>&lt;p&gt;Roadmap for Go Slice.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 的错误处理</title>
      <link>/posts/go-error-handling/</link>
      <pubDate>Mon, 22 Aug 2022 23:40:01 +0800</pubDate>
      
      <guid>/posts/go-error-handling/</guid>
      <description>&lt;p&gt;原文：&lt;a href=&#34;https://go.dev/blog/error-handling-and-go&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Error handling and Go&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;介绍&#34;&gt;介绍&lt;a class=&#34;anchor ms-1&#34; href=&#34;#介绍&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;如果你写过 Go 的代码，就一定遇到过 Go 的内置类型 error。一个 error 类型的值可用于指明程序的某种不正常的状态，比如，当打开文件失败时，os.Open 函数会返回一个非 nil 的 error 值。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL 转义问题</title>
      <link>/posts/go-sql-escape/</link>
      <pubDate>Wed, 11 May 2022 13:49:39 +0800</pubDate>
      
      <guid>/posts/go-sql-escape/</guid>
      <description>&lt;p&gt;SQL 转义问题是指执行的 SQL 语句中包含了某些特定的字符，如单引号 &lt;code&gt;&#39;&lt;/code&gt;、反斜杠 &lt;code&gt;\&lt;/code&gt; 等，导致 SQL 语句不能正常执行。所以，我们应该在拼接 SQL 语句的过程中对特别的传入参数进行转义。&lt;/p&gt;
&lt;p&gt;环境信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MySQL 8.0.28；&lt;/li&gt;
&lt;li&gt;Go 1.16.9 windows/amd64&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>channel 的方向</title>
      <link>/posts/go-channel-direction/</link>
      <pubDate>Thu, 05 May 2022 17:17:29 +0800</pubDate>
      
      <guid>/posts/go-channel-direction/</guid>
      <description>&lt;p&gt;在回忆管道方向的语法上时不时地会出错，所以搜罗一些资料以加强自身的记忆。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go&amp;MySQL`max_allowed_packet`</title>
      <link>/posts/go-max-allowed-packet/</link>
      <pubDate>Sat, 30 Apr 2022 20:25:09 +0800</pubDate>
      
      <guid>/posts/go-max-allowed-packet/</guid>
      <description>&lt;p&gt;当发送给数据库的语句过大时，会报如下错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;panic: Error 1105: Parameter of prepared statement which is &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; through mysql_send_long_data&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; is longer than &lt;span class=&#34;s1&#34;&gt;&amp;#39;max_allowed_packet&amp;#39;&lt;/span&gt; bytes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从报错中可知，需要修改 &lt;code&gt;max_allowed_packet&lt;/code&gt; 选项的值。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Map</title>
      <link>/posts/go-map-detail/</link>
      <pubDate>Wed, 27 Apr 2022 16:02:52 +0800</pubDate>
      
      <guid>/posts/go-map-detail/</guid>
      <description>&lt;p&gt;Go 中 map 是键值对的关联容器（Associative Container），可以存储不同类型的键值对，其中键的类型需要满足可比较（==）特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Slice 什么时候报 out of range</title>
      <link>/posts/go-slice-out-of-range/</link>
      <pubDate>Tue, 26 Apr 2022 09:24:01 +0800</pubDate>
      
      <guid>/posts/go-slice-out-of-range/</guid>
      <description>&lt;p&gt;面试的时候问到了一个关于 go Slice 的问题，即为什么在 &lt;code&gt;a[i:]&lt;/code&gt; 中 &lt;code&gt;i&lt;/code&gt; 的取值可以是 &lt;code&gt;a&lt;/code&gt; 的长度。平时开发中也是这么用的，但没太深入的了解，所以在这篇文章中对其进行一些探讨。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows 下移动文件的坑</title>
      <link>/posts/go-file-rename-pit/</link>
      <pubDate>Sun, 24 Apr 2022 17:16:44 +0800</pubDate>
      
      <guid>/posts/go-file-rename-pit/</guid>
      <description>&lt;p&gt;在 Windows 下，Go 的 &lt;code&gt;os&lt;/code&gt; 标准库提供的 &lt;code&gt;Rename&lt;/code&gt; 方法不能跨磁盘移动文件。下面通过问题重现，提供两种解决方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>URL 下载网络文件</title>
      <link>/posts/go-download-network-file/</link>
      <pubDate>Sun, 24 Apr 2022 10:00:25 +0800</pubDate>
      
      <guid>/posts/go-download-network-file/</guid>
      <description>&lt;p&gt;从网络上下载文件是开发过程中常用的需求，常规流程是：（1）发送请求；（2）接收响应并读取响应体内容；（3）保存到本地文件。本文包含的两个例子分别来自于&lt;strong&gt;参考 [1]&lt;/strong&gt; 和&lt;strong&gt;参考 [2]&lt;/strong&gt;，在此基础上做了少量的修改。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis 的 list 和 stream：异步记录请求信息</title>
      <link>/posts/go-redis-request-log-dumper/</link>
      <pubDate>Sat, 23 Apr 2022 19:05:01 +0800</pubDate>
      
      <guid>/posts/go-redis-request-log-dumper/</guid>
      <description>&lt;p&gt;在 Web 开发中，常常需要对请求信息进行记录，形成日志以便于后期评估应用的性能。请求信息通常包含客户端地址、请求的 URL、请求时间及请求执行时间。在程序中，可以以同步或异步的方式完成这一需求。同步方式是指请求信息写入日志文件后才返回数据给客户端，异步方式则是在返回数据之前以新线程或进程完成对请求信息的记录。开源的日志包有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/go.uber.org/zap&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Zap&lt;/a&gt;：出自 Uber 团队，以高性能著称；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rs/zerolog&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Zerolog&lt;/a&gt;：以易用性著称，支持 7 种日志级别；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sirupsen/logrus&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Logrus&lt;/a&gt;：兼容标准日志包格式，也是本人常用的日志包；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apex/log&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;apex/log&lt;/a&gt;：受 Logrus 启发，简化操作后的 Logrus；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/inconshreveable/log15&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; Log15&lt;/a&gt;：日志可读性强；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;5 个日志包的详细介绍可以看&lt;a href=&#34;/posts/go-five-structured-logging-package/&#34;&gt;《5 种结构化 Go 日志包对比分析》&lt;/a&gt;这篇文章。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 的反射包 reflect</title>
      <link>/posts/go-set-value-via-reflect-package/</link>
      <pubDate>Thu, 21 Apr 2022 19:59:01 +0800</pubDate>
      
      <guid>/posts/go-set-value-via-reflect-package/</guid>
      <description>&lt;p&gt;首先贴上 Go 开发团队对 reflect 包的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Package reflect implements run-time reflection, allowing a program to manipulate objects with arbitrary types. The typical use is to take a value with static type interface{} and extract its dynamic type information by calling TypeOf, which returns a Type.&lt;/p&gt;
&lt;p&gt;A call to ValueOf returns a Value representing the run-time data. Zero takes a Type and returns a Value representing a zero value for that type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从描述中，我们得到以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;reflect 包实现了运行时的反射机制，允许程序操作任意类型的对象；&lt;/li&gt;
&lt;li&gt;TypeOf 可以得到一个 interface{} 的具体类型，ValueOf 可以得到一个 interface{} 的具体值；&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>CSIG 线上面试</title>
      <link>/posts/interview-csig/</link>
      <pubDate>Fri, 15 Apr 2022 11:24:13 +0800</pubDate>
      
      <guid>/posts/interview-csig/</guid>
      <description>&lt;p&gt;有幸搞了个 CSIG 的线上面试，感觉是“没什么感觉”，一般般吧，没过。&lt;/p&gt;
&lt;p&gt;前面介绍什么就不说了，我这边没突出什么工作亮点，然后就直接共享桌面写代码了。题目是编程实现一个由字符串数组表示的大数的除以 9 的计算，后面又追问了小数点后值如何保存，所以索性在线下实现也写了写。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 内置的 RPC 包</title>
      <link>/posts/go-built-in-rpc-package/</link>
      <pubDate>Sun, 10 Apr 2022 16:37:30 +0800</pubDate>
      
      <guid>/posts/go-built-in-rpc-package/</guid>
      <description>在网络或 I/O 连接中，可以使用 net/rpc 包实现对一个对象的导出方法的调用，即远程过程调用（Remote Procedure Call，RPC）。通过向 RPC 服务注册一个对象，使</description>
    </item>
    
    <item>
      <title>Go 1.18 特性 - 泛型</title>
      <link>/posts/go-1.18-release-features/</link>
      <pubDate>Sun, 10 Apr 2022 12:11:38 +0800</pubDate>
      
      <guid>/posts/go-1.18-release-features/</guid>
      <description>&lt;p&gt;Go 1.18 在 2022 年 3 月 15 日发布，根据团队的&lt;a href=&#34;https://go.dev/blog/go1.18&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;博文&lt;/a&gt;介绍，1.18 版本包含 4 个重要特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;泛型&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;fuzzing；&lt;/li&gt;
&lt;li&gt;工作空间；&lt;/li&gt;
&lt;li&gt;20% 的性能提升；&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Protocol Buffer 减少传输数据的大小</title>
      <link>/posts/protocol-buffer-reduce-data-size/</link>
      <pubDate>Sat, 09 Apr 2022 15:01:17 +0800</pubDate>
      
      <guid>/posts/protocol-buffer-reduce-data-size/</guid>
      <description>&lt;p&gt;Protocol Buffer 的介绍与语法已在文章&lt;a href=&#34;/posts/protocol-buffer-syntax/&#34;&gt;《Protocol Buffer 语法》&lt;/a&gt;给出，本文则演示了 Protocol Buffer 如何减少了传输数据的大小。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Protocol Buffer 语法</title>
      <link>/posts/protocol-buffer-syntax/</link>
      <pubDate>Fri, 08 Apr 2022 16:33:52 +0800</pubDate>
      
      <guid>/posts/protocol-buffer-syntax/</guid>
      <description>Protocol Buffer（Protobuf） 是一种高效的数据结构序列化的机制，同时也是一种结构化数据的存储格式。 序列化与反序列化 序列化：将数据结构或对</description>
    </item>
    
    <item>
      <title>Go 1.16 运行 Revel 项目</title>
      <link>/posts/go-revel-run-require-packages/</link>
      <pubDate>Thu, 31 Mar 2022 10:40:58 +0800</pubDate>
      
      <guid>/posts/go-revel-run-require-packages/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://revel.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Revel&lt;/a&gt; 是一个以高效率、高性能著称的 Go Web 框架，提供了路由、参数解析和验证、会话机制、模板机制、缓存和任务管理等诸多常用的 Web 开发功能。同时作为一个全栈的 MVC 框架， Revel 通过模块实现了组件的复用，因此可以大大提高开发者的效率。其高性能则是依托 Go 语言的性能，相信这个不必多说。但相较于其它职责相对单一的 Web 框架（如 Gin、go-restful），Revel 只能说是在保证性能的基础上尽可能地对开发者友好。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
