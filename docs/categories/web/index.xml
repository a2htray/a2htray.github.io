<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on Mozart&#39;s Sheet</title>
    <link>/categories/web/</link>
    <description>Recent content in Web on Mozart&#39;s Sheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} a2htray. All Rights Reserved.</copyright>
    <lastBuildDate>Sun, 24 Apr 2022 10:00:25 +0800</lastBuildDate><atom:link href="/categories/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>URL 下载网络文件</title>
      <link>/posts/go-download-network-file/</link>
      <pubDate>Sun, 24 Apr 2022 10:00:25 +0800</pubDate>
      
      <guid>/posts/go-download-network-file/</guid>
      <description>&lt;p&gt;从网络上下载文件是开发过程中常用的需求，常规流程是：（1）发送请求；（2）接收响应并读取响应体内容；（3）保存到本地文件。本文包含的两个例子分别来自于&lt;strong&gt;参考 [1]&lt;/strong&gt; 和&lt;strong&gt;参考 [2]&lt;/strong&gt;，在此基础上做了少量的修改。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis 的 list 和 stream：异步记录请求信息</title>
      <link>/posts/go-redis-request-log-dumper/</link>
      <pubDate>Sat, 23 Apr 2022 19:05:01 +0800</pubDate>
      
      <guid>/posts/go-redis-request-log-dumper/</guid>
      <description>&lt;p&gt;在 Web 开发中，常常需要对请求信息进行记录，形成日志以便于后期评估应用的性能。请求信息通常包含客户端地址、请求的 URL、请求时间及请求执行时间。在程序中，可以以同步或异步的方式完成这一需求。同步方式是指请求信息写入日志文件后才返回数据给客户端，异步方式则是在返回数据之前以新线程或进程完成对请求信息的记录。开源的日志包有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/go.uber.org/zap&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Zap&lt;/a&gt;：出自 Uber 团队，以高性能著称；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rs/zerolog&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Zerolog&lt;/a&gt;：以易用性著称，支持 7 种日志级别；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sirupsen/logrus&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Logrus&lt;/a&gt;：兼容标准日志包格式，也是本人常用的日志包；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apex/log&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;apex/log&lt;/a&gt;：受 Logrus 启发，简化操作后的 Logrus；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/inconshreveable/log15&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; Log15&lt;/a&gt;：日志可读性强；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;5 个日志包的详细介绍可以看&lt;a href=&#34;/posts/go-five-structured-logging-package/&#34;&gt;《5 种结构化 Go 日志包对比分析》&lt;/a&gt;这篇文章。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 1.16 运行 Revel 项目</title>
      <link>/posts/go-revel-run-require-packages/</link>
      <pubDate>Thu, 31 Mar 2022 10:40:58 +0800</pubDate>
      
      <guid>/posts/go-revel-run-require-packages/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://revel.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Revel&lt;/a&gt; 是一个以高效率、高性能著称的 Go Web 框架，提供了路由、参数解析和验证、会话机制、模板机制、缓存和任务管理等诸多常用的 Web 开发功能。同时作为一个全栈的 MVC 框架， Revel 通过模块实现了组件的复用，因此可以大大提高开发者的效率。其高性能则是依托 Go 语言的性能，相信这个不必多说。但相较于其它职责相对单一的 Web 框架（如 Gin、go-restful），Revel 只能说是在保证性能的基础上尽可能地对开发者友好。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>同源策略 Same-Origin Policy</title>
      <link>/posts/web-same-origin-policy/</link>
      <pubDate>Tue, 29 Mar 2022 15:56:02 +0800</pubDate>
      
      <guid>/posts/web-same-origin-policy/</guid>
      <description>&lt;p&gt;同源策略（Same-Origin Policy，SOP）是一种保护 Web 资源的安全机制，它限制了不同源之间的资源访问。需要说明的是，SOP 只作用于应用脚本，这意味着在 HTML 标签中可以引入不同源的图片、CSS 文件或动态加载的脚本文件（见&lt;a href=&#34;/posts/web-same-origin-policy/#%e9%aa%8c%e8%af%81-1&#34;&gt;验证 1&lt;/a&gt;）。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
